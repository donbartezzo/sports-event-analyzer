---
import DashboardLayout from "../../layouts/DashboardLayout.astro";
import { EventsListWrapper } from "../../components/events/EventsListWrapper";
import type { Event, League } from "../../types";

interface Discipline {
  id: string;
  name: string;
  code: string;
}

// Force SSR to avoid prerender-time fetch issues
export const prerender = false;

// const { user } = Astro.locals; // unused
const sport = Astro.url.searchParams.get("sport") ?? "";
const league = Astro.url.searchParams.get("league");
let events: Event[] = [];
let leagues: League[] = [];
let disciplines: Discipline[] = [];

// Default discipline to football: redirect if no sport provided
if (!sport) {
  // Keep user on the same page but with default sport preselected
  return Astro.redirect("/events/list?sport=football");
}

// Fetch disciplines (SSR) – served with server-side cache
try {
  const d = await Astro.fetch("/api/disciplines");
  if (d.ok) {
    const json = await d.json();
    disciplines = json.data as Discipline[];
  }
} catch {
  /* ignore */
}

// Fallback to static list if empty (robustness against API/cache issues)
if (!disciplines || disciplines.length === 0) {
  disciplines = [
    { id: "football", name: "Football", code: "football" },
    { id: "basketball", name: "Basketball", code: "basketball" },
    { id: "volleyball", name: "Volleyball", code: "volleyball" },
    { id: "baseball", name: "Baseball", code: "baseball" },
    { id: "hockey", name: "Hockey", code: "hockey" },
  ];
}

// Fetch events only when sport and league are selected
if (sport && league) {
  try {
    const params = new URLSearchParams({ league, next: "100", sport });
    const res = await Astro.fetch("/api/events?" + params.toString());
    if (res.ok) {
      const json = await res.json();
      events = json.data as Event[];
    }
  } catch {
    // swallow; UI below will show empty state
  }
}

// Fetch leagues only when sport chosen
if (sport) {
  try {
    const resp = await Astro.fetch("/api/leagues?" + new URLSearchParams({ sport }));
    if (resp.ok) {
      const json = await resp.json();
      leagues = json.data as League[];
    }
  } catch {
    /* ignore */
  }
}
---

<DashboardLayout title="Events - Sports Event Analyzer">
  <div class="flex justify-between items-center mb-8">
    <div>
      <h3 class="text-lg font-medium">Events</h3>
      <p class="text-sm text-muted-foreground">Browse and analyze sports events.</p>
    </div>
  </div>
  <div class="mb-6 flex items-center gap-3 flex-wrap">
    <div class="flex items-center gap-3">
      <label for="sport-select" class="text-sm font-medium">Discipline</label>
      <select id="sport-select" name="sport" class="border rounded px-3 py-2 text-sm" aria-label="Select discipline">
        <option value="">— select —</option>
        {
          disciplines.map((d) => (
            <option value={d.code} selected={sport === d.code}>
              {d.name}
            </option>
          ))
        }
      </select>
    </div>
    <div class="flex items-center gap-3">
      <label for="league-select" class="text-sm font-medium">League</label>
      <select
        id="league-select"
        name="league"
        class="border rounded px-3 py-2 text-sm disabled:opacity-50"
        aria-label="Select league to filter events"
        disabled={sport ? undefined : true}
      >
        <option value="">{sport ? "All leagues" : "Choose discipline first"}</option>
        {
          leagues.map((l) => (
            <option value={l.id} selected={league ? String(l.id) === league : undefined}>
              {l.name}
              {l.country ? " (" + l.country + ")" : ""}
            </option>
          ))
        }
      </select>
      <span
        id="league-loading"
        class="inline-flex items-center gap-2 text-xs text-muted-foreground"
        role="status"
        aria-live="polite"
        style="display: none;"
      >
        <svg
          class="animate-spin h-4 w-4 text-muted-foreground"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
        </svg>
        Loading leagues…
      </span>
    </div>
    <p id="league-hint" class="mt-2 text-xs text-muted-foreground" style="display: none;">
      No leagues available for the selected discipline.
    </p>
  </div>
  <script src="/js/events-list.js" is:inline></script>
  <div class="rounded-md border">
    {
      sport && league ? (
        <EventsListWrapper events={events} discipline={sport} client:load />
      ) : (
        <div class="p-10 text-center text-muted-foreground flex flex-col items-center gap-3">
          <svg
            class="h-10 w-10 text-muted-foreground"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            aria-hidden="true"
          >
            <rect x="3" y="4" width="18" height="16" rx="2" ry="2" stroke="currentColor" stroke-width="1.5" />
            <path d="M16 2v4M8 2v4M3 10h18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
          </svg>
          <h4 class="text-sm font-medium">
            {!sport ? "Select a discipline to begin." : "Select a league to view upcoming events."}
          </h4>
          <p class="text-xs">Use the selectors above to filter upcoming fixtures.</p>
        </div>
      )
    }
  </div>
</DashboardLayout>
